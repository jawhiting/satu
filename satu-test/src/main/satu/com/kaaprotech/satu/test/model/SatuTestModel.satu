/*
 * Copyright 2014 Kaaprotech Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.kaaprotech.satu.test.model;

class SatuTestModel {

    key intKey : Int; // Primitive, enum or declared key classes can define a model key

    val intField : Int;

    val intFieldWithDefault : Int = 7;

    val doubleField : Double;

    val doubleFieldWithDefault : Double = 23.7d;

    val stringField : String;

    val stringFieldWithDefault : String = "~stringFieldWithDefault~";

    val enumField : SatuTestEnum;

    val enumFieldWithDefault : SatuTestEnum = ThirdEnumMember;

    val dataTimeField : DateTime; // Joda DateTime

    val modelField : SatuTestModel;

    val keyField : SatuTestKey;

    val setOfKeysField : Set<SatuTestKey>;

    val mapOfKeysField : Map<SatuTestEnum, SatuTestKey>;

    val mapOfModelsField : Map<SatuTestEnum, SatuTestModel>;  // Note the key type of the map doesn't need to match the key type of the model

    val setOfImportedTypes : Set<DateTime>; // Currently only DateTime is supported

    val mapOfImportedTypes : Map<DateTime, DateTime>;

    val setOfPrimitiveTypes : Set<Int>;

    val mapOfPrimitiveTypes : Map<Int, Int>;
}

// Models are not permitted in a key class field
key class SatuTestKey {

    val intField : Int;

    val longField : Long;

    val booleanField : Boolean;

    val charField : Char;

    val byteField : Byte;

    val floatField : Float;

    val setOfEnumsField : Set<SatuTestEnum>;

    val mapOfStringDoubleField : Map<String, Double>;

    val setOfPrimitiveTypes : Set<Int>;

    val mapOfPrimitiveTypes : Map<Int, Int>;
}

enum SatuTestEnum { FirstEnumMember, SecondEnumMember, ThirdEnumMember, ForthEnumMember }
